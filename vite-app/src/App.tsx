// --- React Methods
import React, { useState, useEffect } from 'react';

// --- Assets/Artefacts
import logo from './logo.svg';
import './App.css';
import dpoppLogofrom from './assets/dpoppLogo.svg';

// --- Wallet connection utilities
import { initWeb3Onboard } from './utils/onboard';
import { useConnectWallet, useSetChain, useWallets } from '@web3-onboard/react';
import { EIP1193Provider } from '@web3-onboard/common';

// --- Identity Tools
import { verifyCredential, verifyMerkleProof, parseProofs } from '@dpopp/identity';
// - @ hacky-workaround to import @spruceid/didkit-wasm
// issue: when imported directly vite separates the .wasm from the .js and bindings fail
// fix: copying the library into a workspace avoids .vites caching mechanism
import * as DIDKit from '@dpopp/identity/dist/didkit-browser';

// test that we can verify a credential and merkle proof
(async () => {
  // Given a VC...
  const verifiableCredential = {
    '@context': ['https://www.w3.org/2018/credentials/v1'],
    type: ['VerifiableCredential'],
    credentialSubject: {
      id: 'did:ethr:0x010#Simple',
      root: 'w00pQ9isjFAZm4hOqeH3oelwlfbbG8ZeKUdxtglsQiY=',
      '@context': [
        {
          proofs: 'https://schema.org/Text',
          root: 'https://schema.org/Text',
        },
      ],
      proofs:
        'eyJ0eXBlIjpbeyJyaWdodCI6ImViYjFiNDA4ZTM4OGI3N2ZhNWVkODU2OGQyMmZkNTI1YzdmMDU3NTllYWRjM2NiZWZjYTk0MDFjNTU3OTNiZDcifSx7InJpZ2h0IjoiNGNiYzA4YjgzZWM2OTdlODA0YTllODMxZWQwZmJkYjljOTQ2MjQyNjc5YjA3NWNhZjI0YzhiZGVkYWVhYjZjYSJ9XSwiYWRkcmVzcyI6W3sibGVmdCI6IjNmZWU5NWRhNWFiNjllYmZkYzE2ZWM4OTJiNzU0MTA1YTExYzIwMjAzMDU0YTZjNmJjYzBhNjAxNzY4OTEwNDMifSx7InJpZ2h0IjoiNGNiYzA4YjgzZWM2OTdlODA0YTllODMxZWQwZmJkYjljOTQ2MjQyNjc5YjA3NWNhZjI0YzhiZGVkYWVhYjZjYSJ9XSwidmVyc2lvbiI6W3sicmlnaHQiOiI5Zjg2ZDA4MTg4NGM3ZDY1OWEyZmVhYTBjNTVhZDAxNWEzYmY0ZjFiMmIwYjgyMmNkMTVkNmMxNWIwZjAwYTA4In0seyJsZWZ0IjoiODQzOTI5NzBmZTllNDFjODlhZDkzYjAwNjcwYTExMjZlZmFmNmFmMzgyMTk3ZTMwNmIxNzM0ZTQ0ZjgwYjAyNyJ9XSwidXNlcm5hbWUiOlt7ImxlZnQiOiJmMGI4Yzc3ZDk3OGQ3YjRhZWJlYjFkZjVhMmMwYTZhYTcwMzkzNjg5ODE5ZGQ0MDYwODI2YWI2ZDM2YjVlYTkwIn0seyJsZWZ0IjoiODQzOTI5NzBmZTllNDFjODlhZDkzYjAwNjcwYTExMjZlZmFmNmFmMzgyMTk3ZTMwNmIxNzM0ZTQ0ZjgwYjAyNyJ9XX0=',
    },
    issuer: 'did:key:z6Mkmhp2sE9s4AxFrKUXQjcNxbDV7WTM8xdh1FDNmNDtogdw',
    issuanceDate: '2022-04-03T20:52:16.707Z',
    proof: {
      type: 'Ed25519Signature2018',
      proofPurpose: 'assertionMethod',
      verificationMethod:
        'did:key:z6Mkmhp2sE9s4AxFrKUXQjcNxbDV7WTM8xdh1FDNmNDtogdw#z6Mkmhp2sE9s4AxFrKUXQjcNxbDV7WTM8xdh1FDNmNDtogdw',
      created: '2022-04-03T20:52:16.707Z',
      jws: 'eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..pX5YajGztOk2e_Xg-yEddqInu8duvmEJLYXWDo-9nyQi5xOeen_OXN7-kJqooIr6Zxh6WuDSgXv9y_77smsHBw',
    },
    expirationDate: '2022-05-03T20:52:16.707Z',
  };
  // parse the proofs from base64 to JSON
  const parsedProofs = parseProofs(verifiableCredential.credentialSubject.proofs);
  // extract a single proof to test is a _secret matches the _proof in the _root
  const matchingProof = parsedProofs.username;
  const matchingSecret = 'test';
  const matchingRoot = verifiableCredential.credentialSubject.root;
  // check if the proof verifies this content
  const verifiedProof = await verifyMerkleProof(matchingProof, matchingSecret, matchingRoot);
  // verify that the VC was generated by the trusted authority
  const verifiedVC = await verifyCredential(DIDKit, verifiableCredential);

  // print result
  console.log({ verifiedVC, verifiedProof });
})();

function App() {

  // Use onboard to control the current provider/wallets
  const [{ wallet }, connect, disconnect] = useConnectWallet();
  const [{ chains, connectedChain, settingChain }, setChain] = useSetChain();
  const connectedWallets = useWallets();

  const [web3Onboard, setWeb3Onboard] = useState<any>(null);
  const [label, setLabel] = useState<string | undefined>();
  const [address, setAddress] = useState<string | undefined>();
  const [accounts, setAccounts] = useState<Record<string, any> | undefined>();
  const [provider, setProvider] = useState<EIP1193Provider | undefined>();

  // Init onboard to enable hooks
  useEffect(() => {
    setWeb3Onboard(initWeb3Onboard);
  }, []);

  // Update on wallet connect
  useEffect(() => {
    // no connection
    if (!connectedWallets.length) {
      setLabel(undefined);
      setAddress(undefined);
      setAccounts(undefined);
      setProvider(undefined);
    } else {
      // record details
      setLabel(connectedWallets[0]?.label);
      setAddress(connectedWallets[0]?.accounts[0].address);
      setAccounts(connectedWallets[0]?.accounts);
      setProvider(connectedWallets[0]?.provider);
      // flaten array for storage
      const connectedWalletsLabelArray = connectedWallets.map(({ label }) => label);
      // store in localstorage
      window.localStorage.setItem('connectedWallets', JSON.stringify(connectedWalletsLabelArray));
    }
  }, [connectedWallets]);

  // Connect wallet on reload
  useEffect(() => {
    // retrieve localstorage state
    const previouslyConnectedWallets = JSON.parse(window.localStorage.getItem('connectedWallets') || '[]') as string[];
    if (previouslyConnectedWallets?.length) {
      /* eslint-disable no-inner-declarations */
      async function setWalletFromLocalStorage() {
        await connect({
          autoSelect: {
            label: previouslyConnectedWallets[0],
            disableModals: true,
          },
        });
      }
      // restore from localstorage
      setWalletFromLocalStorage();
    }
  }, [web3Onboard, connect]);

  // Toggle connect/disconnect
  const handleConnection = () => {
    if (!address) {
      connect({});
    } else {
      disconnect({
        label: label || '',
      });
    }
  };

  return (
    <div className="bg-violet-700 font-librefranklin text-gray-100 min-h-max font-miriam-libre min-h-default">
      <div className="container px-5 py-24 mx-auto">
        <div className="mx-auto flex flex-wrap">
          <div className="w-1/2 w-full py-6 mb-6">
            <img src={dpoppLogofrom} className="App-logo" alt="logo" />
            <div className="font-miriam-libre text-gray-050 mt-10 font-normal font-bold leading-relaxed">
              <p className="text-6xl">
                Gitcoin
                <br />
                ID Passport
              </p>
            </div>
            <div className="font-libre-franklin w-1/3 mt-10">
              Gitcoin ID Passport is an identity aggregator of the top identity providers in the web3 space into one
              transportable identity that proves your personhood.
            </div>

            <div className="mb-10 mt-10">
              <button
                data-testid="connectWalletButton"
                className="bg-gray-100 text-violet-500 rounded-lg py-4 px-20"
                onClick={handleConnection}
              >
                <p className="text-base">{address ? `Disconnect from ${label || ''}` : 'Get Started'}</p>
              </button>
              {address ? <div className="pt-3">Connected to: {JSON.stringify(address, null, 2)}</div> : null}
              {connectedWallets.map(({ label, accounts }) => {
                return (
                  <div key={label}>
                    <div className="py-3">{label} Accounts Available:</div>
                    <div>
                      <pre>{JSON.stringify(accounts, null, 4)}</pre>
                    </div>
                  </div>
                );
              })}
            </div>

            <a className="underline">Why use your wallet as your identity?</a>
          </div>
          <div className="lg:w-1/2 w-full lg:h-auto object-cover object-center rounded"></div>
        </div>
      </div>
    </div>
  );
}

export default App;
