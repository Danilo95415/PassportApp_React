// --- React Methods
import React, { useState, useEffect, useContext } from "react";

// --- Identity Tools
import { ProofRecord, VerifiableCredential } from "@dpopp/types";
import { fetchVerifiableCredential, verifyCredential, verifyMerkleProof, generateMerkle } from "@dpopp/identity/src";
// - @workaround to import @spruceid/didkit-wasm
// issue: when imported directly vite separates the .wasm from the .js and bindings fail
// fix: copying the library into a workspace avoids .vites caching mechanism
import * as DIDKit from "@dpopp/identity/dist/didkit-browser";
import { UserContext } from "../App";

// --- Identity Providers
import { Google } from "./providers/Google";

// --- ENV vars
const iamUrl = process.env.DPOPP_IAM_URL;

export function Dashboard(): JSX.Element {
  const [signature, setSignature] = useState<string | undefined>();
  const [record, setRecord] = useState<false | ProofRecord | undefined>();
  const [challenge, setChallenge] = useState<false | VerifiableCredential | undefined>();
  const [credential, setCredential] = useState<false | VerifiableCredential | undefined>();
  const [verifiedMerkle, setVerifiedMerkle] = useState<boolean | undefined>();
  const [verifiedCredential, setVerifiedCredential] = useState<boolean | undefined>();

  const { handleConnection, address, walletLabel, connectedWallets, signer, passport, handleCreatePassport } =
    useContext(UserContext);

  // fetch an example VC from the IAM server
  const handleFetchCredential = (): void => {
    fetchVerifiableCredential(
      iamUrl,
      {
        address: address || "",
        type: "Simple",
        version: "0.0.0",
        proofs: {
          valid: "true",
          username: "test",
        },
      },
      signer
    )
      .then((res): void => {
        setSignature(res.signature);
        setRecord(res.record);
        setChallenge(res.challenge);
        setCredential(res.credential);
        // reset verification
        setVerifiedMerkle(undefined);
        setVerifiedCredential(undefined);
      })
      .catch((e): void => {
        throw e;
      });
  };

  // Verify the example VC returned from the IAM server
  const handleVerifyCredential = (): void => {
    if (record && credential) {
      // Recreate the merkle root
      const merkle = generateMerkle(record);
      // extract a single proof to test is a secret matches the proof in the root
      const matchingProof = merkle.proofs.username;
      const matchingSecret = record.username || "";
      const matchingRoot = credential.credentialSubject.root || "";
      // check if the proof verifies this content
      const verifiedProof = verifyMerkleProof(matchingProof, matchingSecret, matchingRoot);
      // merkle is verified
      setVerifiedMerkle(verifiedProof);
      // verify that the VC was generated by the trusted authority
      verifyCredential(DIDKit, credential)
        .then((verifiedVC): void => {
          setVerifiedCredential(verifiedVC);
        })
        .catch((e): void => {
          throw e;
        });
    }
  };

  // Update on wallet connect
  useEffect((): void => {
    // no connection
    if (!connectedWallets.length) {
      setRecord(undefined);
      // these are set as part of the verification flow demo (this will be replaced by @dpopp/storage)
      setSignature(undefined);
      setChallenge(undefined);
      setCredential(undefined);
      setVerifiedMerkle(undefined);
      setVerifiedCredential(undefined);
    }
  }, [connectedWallets]);

  return (
    <div className="mx-auto flex flex-wrap">
      <div className="w-1/2 w-full py-6 mb-6">
        <div className="font-miriam-libre text-gray-050 mt-10 font-normal font-bold leading-relaxed">
          {/* Top Avatar and Address */}
          <div className="flex items-center mx-auto sm:flex-row flex-col py-10">
            <div className="h-12 w-12 sm:mr-10 inline-flex items-center justify-center rounded-full bg-indigo-100 text-indigo-500 flex-shrink-0">
              <svg
                fill="none"
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                className="sm:w-10 sm:h-10 w-2 h-2"
                viewBox="0 0 24 24"
              >
                <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            </div>
            <div className="flex-grow sm:text-left text-center mt-6 sm:mt-0">
              <h2 className="text-gray-100 text-lg title-font font-medium mb-2">{address}</h2>
            </div>

            <div className="mb-10 mt-10 md:w-1/4">
              <button
                data-testid="connectWalletButton"
                className="bg-gray-100 text-violet-500 rounded-lg py-2 px-2 min-w-full"
                onClick={handleConnection}
              >
                <p className="text-sm">{address ? `Disconnect from ${walletLabel || ""}` : "Get Started"}</p>
              </button>
            </div>
          </div>

          <p className="text-6xl">
            Gitcoin
            <br />
            ID Passport
          </p>
        </div>

        {address && (
          <div className="p-20 mt-2 mb-2">
            {!passport && (
              <button
                className="bg-gray-100 mb-10 min-w-full mt-10 px-20 py-4 rounded-lg text-violet-500"
                onClick={handleCreatePassport}
              >
                Create Passport
              </button>
            )}
            <pre className="text-gray-100">
              {passport && `Your Passport: ${JSON.stringify(passport, undefined, 4)}`}
            </pre>
            <p className="text-gray-100 text-3xl underline mt-10">{passport && "Stamps will be here"}</p>
            {passport && <Google />}
          </div>
        )}

        <button
          className="bg-gray-100 mb-10 min-w-full mt-10 px-20 py-4 rounded-lg text-violet-500"
          onClick={handleFetchCredential}
        >
          Issue a Verifiable Credential
        </button>
        {challenge ? <p>✅ Challenged received ({challenge.credentialSubject.challenge}) </p> : null}
        {challenge ? <p>✅ Challenged signed ({signature}) </p> : null}
        {credential ? <p>✅ Credential issued: </p> : null}
        {credential ? <pre>{JSON.stringify(credential, null, 4)}</pre> : null}
        {record ? <p>✅ Provided with the following information: </p> : null}
        {record ? <pre>{JSON.stringify(record, null, 4)}</pre> : null}
        {credential ? (
          <button
            className="bg-gray-100 mb-10 min-w-full mt-10 px-20 py-4 rounded-lg text-violet-500"
            onClick={handleVerifyCredential}
          >
            Verify Credential
          </button>
        ) : null}
        {verifiedMerkle ? (
          <p>✅ MerkleProof verifiably contains the passed in username ({record && record.username})</p>
        ) : null}
        {verifiedCredential ? (
          <p>✅ Credential has verifiably been issued by {credential && credential.issuer} </p>
        ) : null}
      </div>
    </div>
  );
}
